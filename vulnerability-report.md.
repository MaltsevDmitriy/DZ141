A1: 
For the SQL injection I had found where form data is taken in but not cleaned properly. Since debug is turned on it was easy to find a route with the name of upload. Also, them having a "file name" text field on that particular view was appearant that this is where SQL injection would be easiest. In the source code you could look at where this input is taken in and find the correct format that needed to go into the text input.
To combat this, all you would need to do is use the ORM. The ORM provides a layer between the form input and the actual SQL code so the user can not just input SQL commands into a text field.

A2:
For the broken auth, the deisngers had forgotten to exclude permissions fields from their forms. This allows user to easily create a form through the Chrome console, to let themselves become 'superusers'. With this you would be able to get a authorized cookie and affect the acutla user model to have all permissions and sign in as an admin.
To fix this you can add 'is_superuser' and 'is_staff' to the excluded fields in the form, so these attributes would not be an option to change even if someone adds a field in the html.
Also, the designers have opted to use cookie storage for security. It would not be too difficult for someone to get the key sotred in a cookie. Using a different method would be advisable.

A3:

For the XSS security flaw, the creator is using '|safe' in an input field. This allows a user to write javascript into the input and do whatever he wants. To work around this one would need to remove the '|safe' from the code.

A4:
This is a pretty bad one. The creator has no checks to see if the user is authenticated or what projects are assigned to them. The first thing you need to do is use the request.user and run it through Django's is_authenticated() function to make sure the auser has been logged in. Also, the views are collecting the projects in a bad way. Instead of querying them by pk, you should get them out by the DB's foreign keys that are linked speciacally to that user. This way only the projects assigned to that user will pop up.

A5:
This was an easy one. Django debugs have been set to true during production. So because of this the user is able to see much information like the url routes and what not. All Django errors will be shown to the user. To fix this you just need to set Debug and Template Debug to false. I am leaving it on for now while I do these assignments.

A6:
This site is using a bad hashing algorithm. This algorithm is known to be easily cracked. (So why does Django even support it?). A user, if they knew what they were doing, would be able to get passwords unhashed and login. To fix this we set the hasinh algorithm to a different one.

A7:
The user is being aiuthenticated but not checking for permissions. This would allow any logged in user to access information that is only supposed to be for a user with specific permission. To fix this we use user.has_perm() on top of is_authenicated().

A8:
For CSRF the creator for some reason has added a csrf_exemot decorator to many of the views. This allows someone from another browser to create a form with the 'action' being the same as the url of the real site, and add anyinfo they want to the site. This is bad. So we need to get rid of the 'csrf_exempt' decorators and make sure we have our csrf token in the forms.

